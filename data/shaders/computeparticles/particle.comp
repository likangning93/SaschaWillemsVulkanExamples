#version 450

#extension GL_ARB_separate_shader_objects : enable
#extension GL_ARB_shading_language_420pack : enable

struct Particle
{
	vec2 pos;
	vec2 vel;
};

// Binding 0 : Particle storage buffer (read)
layout(std140, binding = 0) buffer ParticlesA
{
   Particle particlesA[ ];
};

// Binding 1 : Particle storage buffer (write)
layout(std140, binding = 1) buffer ParticlesB
{
   Particle particlesB[ ];
};

layout (local_size_x = 16, local_size_y = 16) in;

layout (binding = 2) uniform UBO
{
	float deltaT;
	float rule1Distance;
	float rule2Distance;
	float rule3Distance;
	float rule1Scale;
	float rule2Scale;
	float rule3Scale;
	int particleCount;
} ubo;

void main()
{
    // Current SSBO index
    uint index = gl_GlobalInvocationID.x;
	// Don't try to write beyond particle count
    if (index >= ubo.particleCount)
		return;

    // Read position and velocity
		vec2 vPos = particlesA[index].pos.xy;
    vec2 vVel = particlesA[index].vel.xy;

		vec2 center = vec2(0.0, 0.0);
		int neighborCount = 0;

		vec2 separate = vec2(0.0, 0.0);

		vec2 cohesion = vec2(0.0, 0.0);

		for (int i = 0; i < ubo.particleCount; i++) {
			if (i == index) continue;
			vec2 otherPos = particlesA[i].pos.xy;
			vec2 otherVel = particlesA[i].vel.xy;
			float dist = length(otherPos - vPos);

			if (dist < ubo.rule1Distance) {
				// rule 1: cohesion - boids fly towards the center of mass of neighbors
				center += otherPos;
				neighborCount++;
			}

			if (dist <  ubo.rule2Distance) {
				// rule 2: separation: boids try to keep some distance away from other boids
				separate -= otherPos - vPos;
			}

			if (dist <  ubo.rule3Distance) {
				// rule 3: alignment: boids try to match velocities of neighboring boids
				cohesion += otherVel;
			}
		}

		if (neighborCount > 0) {
			center /= float(neighborCount);
			vVel += (center - vPos) * ubo.rule1Scale;
		}

		vVel += cohesion * ubo.rule3Scale;
		vVel += separate * ubo.rule2Scale;

		// clamp velocity
		float len = length(vVel);
		if (len > 0.05) vVel = normalize(vVel) * 0.05;

		vPos += vVel * ubo.deltaT;

    // Wrap around boundary
		if (vPos.x < -1.0) vPos.x = 1.0;
		if (vPos.x > 1.0) vPos.x = -1.0;
		if (vPos.y < -1.0) vPos.y = 1.0;
		if (vPos.y > 1.0) vPos.y = -1.0;

    particlesB[index].pos.xy = vPos;

    // Write back
    particlesB[index].vel.xy = vVel;
}
