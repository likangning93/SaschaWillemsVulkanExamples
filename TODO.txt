- read and understand what's going on in computeparticles.cpp [done... mostly?]
- rewrite the simulation as boids with velocity color
	- get velocity buffer flip-flop
		- this will probably be two descriptor sets and two command... buffers?
	- 
- make a new cmake project
- do the writeup
	- we'll have them set up a buffer
	- have them set up shaders that just color everything and move the particles according to random velocity
	- 
	
	
- we'll say that Vulkan can be used for:
	- multiple physical devices
	- multiple CPU threads
	- many command queues
	- but for now we'll focus on a single logical device, on a single physical device, running from a single CPU thread
	
	
	- ohhhh descriptor LAYOUT is attached to pipeline, SET is just interface for shoving data into there. so can have multiple SETs
	
	- looks like a "command buffer" is basically a "job" that you can submit to a Vulkan Queue. So you only have to "dispatch" the job once, because that's not really launching it, it's recording it into a command that you have saved and can submit to the queue again and again
	
	
- how to edit compute:
1) figure out what new descriptors you need in the shader (attributes and uniforms). make sure your shaders compile for testing!
2) modify any structs in your code [line 77 ish]
3) ... many more things...

- Corentin: btw rebuild command buffers on the fly, with different descriptorSets
- 

Chat with Corentin:
- descriptorLayout and descriptorSet: made an analogy to piping from Python to C++
- descriptorLayout is like the function header... thing. descriptorSet is a set of args that you can pass in
- in Python since you can't talk directly to C++, you make a set of args in the right format and send it off
- in Vulkan, you just have to define on the CPU side how the shader expects things -> descriptorLayout

- btw Corentin says MoltenVK is NOT in good shape
